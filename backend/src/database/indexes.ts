import { Connection } from 'mongoose';

// Fun√ß√£o para criar √≠ndices otimizados no MongoDB
export async function createOptimizedIndexes(connection: Connection) {
  try {
    // √çndices para Users
    const UserModel = connection.models.User;
    if (UserModel) {
      // √çndice composto para autentica√ß√£o (email √∫nico j√° existe)
      await UserModel.collection.createIndex(
        { email: 1 },
        {
          name: 'email_unique_auth',
          unique: true,
          background: true,
        },
      );

      // √çndice para buscas por localiza√ß√£o/empresa
      await UserModel.collection.createIndex(
        { location: 1, company: 1 },
        {
          name: 'location_company_search',
          background: true,
        },
      );

      // √çndice para perfil de conclus√£o
      await UserModel.collection.createIndex(
        { profileCompletion: 1, createdAt: -1 },
        {
          name: 'profile_completion_recent',
          background: true,
        },
      );
    }

    // √çndices para Reports
    const ReportModel = connection.models.Report;
    if (ReportModel) {
      // √çndice composto para queries de dashboard (usu√°rio + data)
      await ReportModel.collection.createIndex(
        { userId: 1, createdAt: -1 },
        {
          name: 'user_reports_timeline',
          background: true,
        },
      );

      // √çndice para buscas por query de pesquisa
      await ReportModel.collection.createIndex(
        { searchQuery: 'text' },
        {
          name: 'search_query_text',
          background: true,
        },
      );

      // √çndice composto para filtros de data + usu√°rio
      await ReportModel.collection.createIndex(
        { createdAt: -1, userId: 1 },
        {
          name: 'reports_date_user',
          background: true,
        },
      );

      // √çndice para m√©tricas globais
      await ReportModel.collection.createIndex(
        { createdAt: -1 },
        {
          name: 'reports_timeline_global',
          background: true,
        },
      );
    }

    // √çndices para Dashboard Read Models
    const DashboardModel = connection.models.DashboardReadModel;
    if (DashboardModel) {
      // √çndice principal para lookups de usu√°rio
      await DashboardModel.collection.createIndex(
        { userId: 1 },
        {
          name: 'dashboard_user_lookup',
          unique: true,
          background: true,
        },
      );

      // √çndice para cache expiration
      await DashboardModel.collection.createIndex(
        { lastUpdated: 1 },
        {
          name: 'dashboard_cache_expiration',
          background: true,
          expireAfterSeconds: 3600, // 1 hora
        },
      );
    }

    console.log('‚úÖ Optimized indexes created successfully');
  } catch (error) {
    console.error('‚ùå Error creating optimized indexes:', error);
    throw error;
  }
}

// Fun√ß√£o para verificar e recriar √≠ndices se necess√°rio
export async function ensureIndexes(connection: Connection) {
  try {
    await createOptimizedIndexes(connection);
  } catch (error) {
    console.warn(
      '‚ö†Ô∏è Index creation failed, continuing without optimization:',
      error,
    );
  }
}

// Fun√ß√£o para performance monitoring de queries
export async function logSlowQueries(connection: Connection) {
  // Habilitar profiling para queries lentas (>100ms)
  try {
    if (connection.db) {
      // Profiling habilitado via configura√ß√£o do MongoDB
      console.log(
        'üìä Query profiling can be enabled via MongoDB configuration',
      );
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è Could not enable query profiling:', error);
  }
}
